apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: argocd
  namespace: argocd
spec:
  interval: 15m
  timeout: 15m
  chart:
    spec:
      chart: argo-cd
      sourceRef:
        kind: HelmRepository
        name: argo
        namespace: argocd
      interval: 5m
  releaseName: argocd
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  # Default values: https://github.com/argoproj/argo-helm/blob/main/charts/argo-cd/values.yaml
  values:
    crds:
      install: true
    global:
      domain: argocd.example.com
      networkPolicy:
        create: true
    configs:
      cm:
        exec.enabled: true
        timeout.reconciliation: 120s
      params:
        server.insecure: true
    dex:
      enabled: false



# server:
#   ingress:
#     # -- Enable an ingress resource for the Argo CD server
#     enabled: true
#     # -- Additional ingress annotations
#     annotations:
#       kubernetes.io/ingress.class: nginx


# ####################
# ## Notifications controller
# notifications:
#   # -- Enable notifications controller
#   enabled: true

#   # -- Configures notification services such as slack, email or custom webhook
#   # @default -- See [values.yaml]
#   ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
#   notifiers:
#     service.webhook.webhook-notify: |
#       url: http://webhook-notify.priv/notify
#       headers:
#       - name: Content-Type
#         value: application/json

#   # -- The notification template is used to generate the notification content
#   ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
#   templates:
#     template.app-created: |
#       webhook:
#         webhook-notify:
#           method: POST
#           body: |
#             {
#               "service": "telegram",
#               "group": "devops",
#               "message": "<b>service</b>: ArgoCD\n<b>task</b>: create application\n<b>message</b>: Application {{.app.metadata.name}} has been created."
#             }
#     template.app-deleted: |
#       webhook:
#         webhook-notify:
#           method: POST
#           body: |
#             {
#               "service": "telegram",
#               "group": "devops",
#               "message": "<b>service</b>: ArgoCD\n<b>task</b>: create application\n<b>message</b>: Application {{.app.metadata.name}} has been deleted."
#             }
#     template.app-health-degraded: |
#       webhook:
#         webhook-notify:
#           method: POST
#           body: |
#             {
#               "service": "telegram",
#               "group": "devops",
#               "message": "<b>service</b>: ArgoCD\n<b>task</b>: create application\n<b>message</b>: Application {{.app.metadata.name}} has degraded."
#             }
#     template.app-sync-failed: |
#       webhook:
#         webhook-notify:
#           method: POST
#           body: |
#             {
#               "service": "telegram",
#               "group": "devops",
#               "message": "<b>service</b>: ArgoCD\n<b>task</b>: create application\n<b>message</b>: Failed to sync application {{.app.metadata.name}}."
#             }
#     template.app-sync-status-unknown: |
#       webhook:
#         webhook-notify:
#           method: POST
#           body: |
#             {
#               "service": "telegram",
#               "group": "devops",
#               "message": "<b>service</b>: ArgoCD\n<b>task</b>: create application\n<b>message</b>: Application {{.app.metadata.name}} sync status is 'Unknown'"
#             }

#   # -- The trigger defines the condition when the notification should be sent
#   ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
#   triggers:
#     trigger.on-created: |
#       - description: Application is created.
#         oncePer: app.metadata.name
#         send:
#         - app-created
#         when: "true"
#     trigger.on-deleted: |
#       - description: Application is deleted.
#         oncePer: app.metadata.name
#         send:
#         - app-deleted
#         when: app.metadata.deletionTimestamp != nil
#     trigger.on-health-degraded: |
#       - description: Application has degraded
#         send:
#         - app-health-degraded
#         when: app.status.health.status == 'Degraded'
#     trigger.on-sync-failed: |
#       - description: Application syncing has failed
#         send:
#         - app-sync-failed
#         when: app.status.operationState.phase in ['Error', 'Failed']
#     trigger.on-sync-status-unknown: |
#       - description: Application status is 'Unknown'
#         send:
#         - app-sync-status-unknown
#         when: app.status.sync.status == 'Unknown'
